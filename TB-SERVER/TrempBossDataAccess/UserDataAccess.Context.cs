//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrempBossDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Threading.Tasks;

    public partial class Tremp_Boss_DBEntities : DbContext
    {
        public Tremp_Boss_DBEntities()
            : base("name=Tremp_Boss_DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Tremp> Tremps { get; set; }
        public virtual DbSet<User_Tremps> User_Tremps { get; set; }
    
        public virtual ObjectResult<Nullable<int>> AddTremp(Nullable<int> user_id, Nullable<bool> tremp_type, Nullable<System.DateTime> tremp_time, string from_root, string to_root, string note, Nullable<int> seats_amount)
        {
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var tremp_typeParameter = tremp_type.HasValue ?
                new ObjectParameter("tremp_type", tremp_type) :
                new ObjectParameter("tremp_type", typeof(bool));
    
            var tremp_timeParameter = tremp_time.HasValue ?
                new ObjectParameter("tremp_time", tremp_time) :
                new ObjectParameter("tremp_time", typeof(System.DateTime));
    
            var from_rootParameter = from_root != null ?
                new ObjectParameter("from_root", from_root) :
                new ObjectParameter("from_root", typeof(string));
    
            var to_rootParameter = to_root != null ?
                new ObjectParameter("to_root", to_root) :
                new ObjectParameter("to_root", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var seats_amountParameter = seats_amount.HasValue ?
                new ObjectParameter("seats_amount", seats_amount) :
                new ObjectParameter("seats_amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddTremp", user_idParameter, tremp_typeParameter, tremp_timeParameter, from_rootParameter, to_rootParameter, noteParameter, seats_amountParameter);
        }
    
        public virtual ObjectResult<GetUserUnjoinedRides_Result> GetUserUnjoinedRides(Nullable<int> group_id, Nullable<int> user_id, Nullable<bool> is_offering_ride)
        {
            var group_idParameter = group_id.HasValue ?
                new ObjectParameter("group_id", group_id) :
                new ObjectParameter("group_id", typeof(int));
    
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var is_offering_rideParameter = is_offering_ride.HasValue ?
                new ObjectParameter("is_offering_ride", is_offering_ride) :
                new ObjectParameter("is_offering_ride", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserUnjoinedRides_Result>("GetUserUnjoinedRides", group_idParameter, user_idParameter, is_offering_rideParameter);
        }
    
        public virtual ObjectResult<Proc_Get_User_Result> Proc_Get_User(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_Get_User_Result>("Proc_Get_User", idParameter);
        }

        public virtual async Task<int> Proc_Update_User(Nullable<int> user_id, string email, string phone_number, string image_URL, string first_name, string last_name, string gender, string notification_token, Nullable<bool> deleted)
        {
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phone_numberParameter = phone_number != null ?
                new ObjectParameter("phone_number", phone_number) :
                new ObjectParameter("phone_number", typeof(string));
    
            var image_URLParameter = image_URL != null ?
                new ObjectParameter("image_URL", image_URL) :
                new ObjectParameter("image_URL", typeof(string));
    
            var first_nameParameter = first_name != null ?
                new ObjectParameter("first_name", first_name) :
                new ObjectParameter("first_name", typeof(string));
    
            var last_nameParameter = last_name != null ?
                new ObjectParameter("last_name", last_name) :
                new ObjectParameter("last_name", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var notification_tokenParameter = notification_token != null ?
                new ObjectParameter("notification_token", notification_token) :
                new ObjectParameter("notification_token", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("deleted", deleted) :
                new ObjectParameter("deleted", typeof(bool));

            return await Task.Run(() => ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_Update_User", user_idParameter, emailParameter, phone_numberParameter, image_URLParameter, first_nameParameter, last_nameParameter, genderParameter, notification_tokenParameter, deletedParameter));
        }

        public virtual async Task<int> Proc_User_Login(string email, ObjectParameter userId)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));

            return await Task.Run(() => ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_User_Login", emailParameter, userId));
        }


        public virtual async Task<int> Proc_User_Registration(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));

            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));

            return await Task.Run(() => ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_User_Registration", emailParameter, passwordParameter));
        }


        public virtual int Proc_Add_Tremp(Nullable<int> user_id, Nullable<bool> tremp_type, Nullable<System.DateTime> tremp_time, string from_route, string to_route, string note, Nullable<int> seats_amount)
        {
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var tremp_typeParameter = tremp_type.HasValue ?
                new ObjectParameter("tremp_type", tremp_type) :
                new ObjectParameter("tremp_type", typeof(bool));
    
            var tremp_timeParameter = tremp_time.HasValue ?
                new ObjectParameter("tremp_time", tremp_time) :
                new ObjectParameter("tremp_time", typeof(System.DateTime));
    
            var from_routeParameter = from_route != null ?
                new ObjectParameter("from_route", from_route) :
                new ObjectParameter("from_route", typeof(string));
    
            var to_routeParameter = to_route != null ?
                new ObjectParameter("to_route", to_route) :
                new ObjectParameter("to_route", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var seats_amountParameter = seats_amount.HasValue ?
                new ObjectParameter("seats_amount", seats_amount) :
                new ObjectParameter("seats_amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_Add_Tremp", user_idParameter, tremp_typeParameter, tremp_timeParameter, from_routeParameter, to_routeParameter, noteParameter, seats_amountParameter);
        }
    
        public virtual int Proc_Approve_User_In_Tremp(Nullable<int> trempId, Nullable<int> creatorId, Nullable<int> userId, string approval)
        {
            var trempIdParameter = trempId.HasValue ?
                new ObjectParameter("TrempId", trempId) :
                new ObjectParameter("TrempId", typeof(int));
    
            var creatorIdParameter = creatorId.HasValue ?
                new ObjectParameter("CreatorId", creatorId) :
                new ObjectParameter("CreatorId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var approvalParameter = approval != null ?
                new ObjectParameter("Approval", approval) :
                new ObjectParameter("Approval", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_Approve_User_In_Tremp", trempIdParameter, creatorIdParameter, userIdParameter, approvalParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Proce_Add_User_To_Tremp(Nullable<int> trempId, Nullable<int> userId)
        {
            var trempIdParameter = trempId.HasValue ?
                new ObjectParameter("TrempId", trempId) :
                new ObjectParameter("TrempId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Proce_Add_User_To_Tremp", trempIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Proc_Delete_Tremp(Nullable<int> trempId, Nullable<int> userId)
        {
            var trempIdParameter = trempId.HasValue ?
                new ObjectParameter("TrempId", trempId) :
                new ObjectParameter("TrempId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Proc_Delete_Tremp", trempIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<string> GetUserNotificationToken(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUserNotificationToken", userIdParameter);
        }
    
        public virtual ObjectResult<string> Proc_Get_User_NotificationToken(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Proc_Get_User_NotificationToken", userIdParameter);
        }
    
        public virtual ObjectResult<Proc_Get_Tremps_Result> Proc_Get_Tremps(Nullable<int> creatorId, Nullable<bool> typeOfTremp, Nullable<System.DateTime> trempTime)
        {
            var creatorIdParameter = creatorId.HasValue ?
                new ObjectParameter("CreatorId", creatorId) :
                new ObjectParameter("CreatorId", typeof(int));
    
            var typeOfTrempParameter = typeOfTremp.HasValue ?
                new ObjectParameter("TypeOfTremp", typeOfTremp) :
                new ObjectParameter("TypeOfTremp", typeof(bool));
    
            var trempTimeParameter = trempTime.HasValue ?
                new ObjectParameter("TrempTime", trempTime) :
                new ObjectParameter("TrempTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_Get_Tremps_Result>("Proc_Get_Tremps", creatorIdParameter, typeOfTrempParameter, trempTimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Proc_Add_User_To_Tremp(Nullable<int> trempId, Nullable<int> userId)
        {
            var trempIdParameter = trempId.HasValue ?
                new ObjectParameter("TrempId", trempId) :
                new ObjectParameter("TrempId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Proc_Add_User_To_Tremp", trempIdParameter, userIdParameter);
        }
    }
}
